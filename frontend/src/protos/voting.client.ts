// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "voting.proto" (package "voting", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Voting } from "./voting";
import type { VotingResponse } from "./voting";
import type { VotingRequest } from "./voting";
import type { VotingGetResponse } from "./voting";
import type { VotingGetRequest } from "./voting";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { VotingIndexResponse } from "./voting";
import type { VotingIndexRequest } from "./voting";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service voting.Voting
 */
export interface IVotingClient {
    /**
     * @generated from protobuf rpc: Index(voting.VotingIndexRequest) returns (voting.VotingIndexResponse);
     */
    index(input: VotingIndexRequest, options?: RpcOptions): UnaryCall<VotingIndexRequest, VotingIndexResponse>;
    /**
     * @generated from protobuf rpc: Get(voting.VotingGetRequest) returns (voting.VotingGetResponse);
     */
    get(input: VotingGetRequest, options?: RpcOptions): UnaryCall<VotingGetRequest, VotingGetResponse>;
    /**
     * @generated from protobuf rpc: Vote(voting.VotingRequest) returns (voting.VotingResponse);
     */
    vote(input: VotingRequest, options?: RpcOptions): UnaryCall<VotingRequest, VotingResponse>;
}
/**
 * @generated from protobuf service voting.Voting
 */
export class VotingClient implements IVotingClient, ServiceInfo {
    typeName = Voting.typeName;
    methods = Voting.methods;
    options = Voting.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Index(voting.VotingIndexRequest) returns (voting.VotingIndexResponse);
     */
    index(input: VotingIndexRequest, options?: RpcOptions): UnaryCall<VotingIndexRequest, VotingIndexResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<VotingIndexRequest, VotingIndexResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(voting.VotingGetRequest) returns (voting.VotingGetResponse);
     */
    get(input: VotingGetRequest, options?: RpcOptions): UnaryCall<VotingGetRequest, VotingGetResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<VotingGetRequest, VotingGetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Vote(voting.VotingRequest) returns (voting.VotingResponse);
     */
    vote(input: VotingRequest, options?: RpcOptions): UnaryCall<VotingRequest, VotingResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<VotingRequest, VotingResponse>("unary", this._transport, method, opt, input);
    }
}
